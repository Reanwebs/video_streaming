// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: pkg/proto/monitaization.proto

package monit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Monitization_HealthCheck_FullMethodName = "/monitization.Monitization/HealthCheck"
	Monitization_VideoReward_FullMethodName = "/monitization.Monitization/VideoReward"
)

// MonitizationClient is the client API for Monitization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitizationClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	VideoReward(ctx context.Context, in *VideoRewardRequest, opts ...grpc.CallOption) (*VideoRewardResponse, error)
}

type monitizationClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitizationClient(cc grpc.ClientConnInterface) MonitizationClient {
	return &monitizationClient{cc}
}

func (c *monitizationClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, Monitization_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monitizationClient) VideoReward(ctx context.Context, in *VideoRewardRequest, opts ...grpc.CallOption) (*VideoRewardResponse, error) {
	out := new(VideoRewardResponse)
	err := c.cc.Invoke(ctx, Monitization_VideoReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitizationServer is the server API for Monitization service.
// All implementations must embed UnimplementedMonitizationServer
// for forward compatibility
type MonitizationServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	VideoReward(context.Context, *VideoRewardRequest) (*VideoRewardResponse, error)
	mustEmbedUnimplementedMonitizationServer()
}

// UnimplementedMonitizationServer must be embedded to have forward compatible implementations.
type UnimplementedMonitizationServer struct {
}

func (UnimplementedMonitizationServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedMonitizationServer) VideoReward(context.Context, *VideoRewardRequest) (*VideoRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VideoReward not implemented")
}
func (UnimplementedMonitizationServer) mustEmbedUnimplementedMonitizationServer() {}

// UnsafeMonitizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitizationServer will
// result in compilation errors.
type UnsafeMonitizationServer interface {
	mustEmbedUnimplementedMonitizationServer()
}

func RegisterMonitizationServer(s grpc.ServiceRegistrar, srv MonitizationServer) {
	s.RegisterService(&Monitization_ServiceDesc, srv)
}

func _Monitization_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitizationServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Monitization_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitizationServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monitization_VideoReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitizationServer).VideoReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Monitization_VideoReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitizationServer).VideoReward(ctx, req.(*VideoRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Monitization_ServiceDesc is the grpc.ServiceDesc for Monitization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monitization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "monitization.Monitization",
	HandlerType: (*MonitizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Monitization_HealthCheck_Handler,
		},
		{
			MethodName: "VideoReward",
			Handler:    _Monitization_VideoReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/monitaization.proto",
}
